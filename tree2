<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>tree</title>
	<style type="text/css">
		.ancestor,.ggf,.gf,.fa,.son{
			border:1px solid black;
			padding: 5px;
			margin:5px;
			font-size: 15px;
			float: left;
			box-sizing: content-box;
		}
		/*.ancestor{
			width: 1500px;
			height: 300px;
		}
		.ggf{
			width: 400px;
			height: 250px;
		}
		.gf{
			width: 100px;
			height: 150px;
		}
		.fa{
			width: 20px;
			height: 30px;
		}
		.son{
			width: 10px;
			height: 20px;
		}*/
	</style>
</head>
<body>
	<div class="ancestor">super
		<div class="ggf">car
			<div class="gf">apple
				<div class="fa">pear</div>
				<div class="fa">pig</div>
				<div class="fa">cola</div>
				<div class="fa">soccer</div>
			</div>
			<div class="gf">phone</div>
			<div class="gf">dog
				<div class="fa">book</div>
				<div class="fa">school</div>
			</div>
		</div>
		<div class="ggf">note
			<div class="gf">human
				<div class="fa">code</div>
				<div class="fa">operate</div>
				<div class="fa">man</div>
			</div>
			<div class="gf">program
				<div class="fa">bement
					<div class="son">cat</div>
				</div>
				<div class="fa">glass</div>
			</div>
		</div>
		<div class="ggf">fish</div>
	</div>
	<br><br>
	<button id="front">先序遍历</button>
	<button id="behind">后序遍历</button>
	<br>
	<input id="search">
	<button id="searchNode">先序查找</button>
	<!-- <button id="behindSearch">后序查找</button> -->
	<script type="text/javascript">
		var treeNodes=[];
		var divsValue=[];
		var divs=document.getElementsByTagName("div");
		var treeAncestor=document.getElementsByClassName("ancestor")[0];
		var time=null;
		//divsValue=Array.prototype.slice.call(divs);
		// for(var i=0;i<divs.length;i++) {
		// 	var vv=divs[i].innerHTML;
		// 	divsValue.push(vv);
		// }
		divsValue=divs[0].innerText.split("\n");
		for(var i=0;i<divsValue.length;i++) {
			divsValue[i]=divsValue[i].replace(/(^\s*)|(\s*$)/g, "");
		}

		function preOrder(node) {
			treeNodes.push(node);
			for(var i=0;i<node.children.length;i++) {
				preOrder((node.children[i]));
			}
		}
		function lastOrder(node) {
			for(var i=0;i<node.children.length;i++) {
				lastOrder((node.children[i]));
			}
			treeNodes.push(node);
		}
		function Search() {
			var searchNodee=document.getElementById("search");
			for(var i=0;i<divsValue.length;i++) {
				if(divsValue[i]==searchNodee.value) {
					break;
				}
			}
			//var i=divsValue.indexOf(searchNodee.value);
			if(i>=0&&i<divsValue.length) {
				divs[i].style.backgroundColor="red";
				setTimeout(function(){
					divs[i].style.backgroundColor="white";
				},5000);
			} else {
				alert("no such node");
			}
		}
		function lastSearch() {
			var searchNum=document.getElementById("search");
			//alert(divsValue.length);
			for(var i=0;i<divsValue.length;i++) {
				if(searchNum.value==divsValue[i]) {
					divs[i].style.backgroundColor="red";
					// alert("*********"+divsValue[i]);
					// setTimeout(function(){
					// 	alert("*********"+divsValue[i]);
					// 	divs[i].style.backgroundColor="white";
					// },700);
					//setTimeout("alert('5 seconds!')",5000);
				} else {
					divs[i].style.backgroundColor="white";
					// setTimeout(function(){
					// 	divs[i].style.backgroundColor="white";
					// },700);
					//setTimeout("alert('5 seconds!')",5000);
				}
			}
			//treeNodes.push(node);
			// 	http://aldrichfork.com/baidu_front_end_school/task9.html
			// 	https://github.com/AldrichFork/baidu_front_end_school/blob/master/task9.html
		// }
		}
		function changeColor(){
			var i=0;
			treeNodes[i].style.backgroundColor="red";
			time=setInterval(function(){
				i++;
				if(i<treeNodes.length){
					treeNodes[i-1].style.backgroundColor="white";
					treeNodes[i].style.backgroundColor="red";
				} else {
					clearInterval(time);
					treeNodes[i].style.backgroundColor="white";
				}
			},700)
		}
		function reset() {
			treeNodes=[];
			clearInterval(time);
			for(var i=0;i<divs.length;i++) {
				divs[i].style.backgroundColor="white"
			}
		}
		function init(){
			var btnFront=document.getElementById("front");
			btnFront.onclick=function(){
				reset();
				preOrder(treeAncestor);
				changeColor();
			}
			var btnBehind=document.getElementById("behind");
			btnBehind.onclick=function(){
				reset();
				lastOrder(treeAncestor);
				changeColor();
			}
			var btnSearch=document.getElementById("searchNode");
			btnSearch.onclick=function(){
				reset();
				Search();
			}
		}
		init();
	</script>

	
</body>
</html>
